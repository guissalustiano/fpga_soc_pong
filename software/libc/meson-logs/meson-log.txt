Build started at 2022-11-05T22:56:54.428356
Main binary: /usr/bin/python
Build Options: -Dmultilib=false -Dpicocrt=false -Datomic-ungetc=false -Dthread-local-storage=false -Dio-long-long=true -Dformat-default=integer -Dincludedir=picolibc/riscv64-unknown-elf/include -Dlibdir=picolibc/riscv64-unknown-elf/lib -Dbackend=ninja '--cross-file /home/guiss/projects/usp/labdig/fpga_soc_pong/software/libc/cross.txt'
Python system: Linux
The Meson build system
Version: 0.63.3
Source dir: /home/guiss/projects/usp/labdig/fpga_soc_pong/env/lib/python3.10/site-packages/pythondata_software_picolibc/data
Build dir: /home/guiss/projects/usp/labdig/fpga_soc_pong/software/libc
Build type: cross build
Project name: picolibc
Project version: 1.7.9
C compiler for the host machine: riscv64-unknown-elf-gcc (gcc 12.2.0 "riscv64-unknown-elf-gcc (Arch User Repository) 12.2.0")
C linker for the host machine: riscv64-unknown-elf-gcc ld.bfd 2.39
C compiler for the build machine: cc (gcc 12.2.0 "cc (GCC) 12.2.0")
C linker for the build machine: cc ld.bfd 2.39.0
Build machine cpu family: x86_64
Build machine cpu: x86_64
Host machine cpu family: riscv
Host machine cpu: vexriscv
Target machine cpu family: riscv
Target machine cpu: vexriscv
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -nostdlib: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#include <float.h>
#ifndef __LDBL_MANT_DIG__
#error No long double support in float.h
#endif
long double test()
{
	long double ld = 0.0L;
	 return ld;
}

Cached compiler stdout:
 
Cached compiler stderr:
 
Checking if "long double check" compiles: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#include <float.h>
char size_test[sizeof(double) == sizeof(long double) ? 1 : -1];

Cached compiler stdout:
 
Cached compiler stderr:
 /home/guiss/projects/usp/labdig/fpga_soc_pong/software/libc/meson-private/tmpuhqheulj/testfile.c:3:6: error: size of array 'size_test' is negative
    3 | char size_test[sizeof(double) == sizeof(long double) ? 1 : -1];
      |      ^~~~~~~~~

Checking if "long double same as double" compiles: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#include <float.h>
char size_test[__LDBL_MANT_DIG__ == 64 ? 1 : -1];

Cached compiler stdout:
 
Cached compiler stderr:
 /home/guiss/projects/usp/labdig/fpga_soc_pong/software/libc/meson-private/tmp3wdzvp4t/testfile.c:3:6: error: size of array 'size_test' is negative
    3 | char size_test[__LDBL_MANT_DIG__ == 64 ? 1 : -1];
      |      ^~~~~~~~~

Checking if "long double mantissa is 64 bits" compiles: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#include <float.h>
char size_test[__LDBL_MANT_DIG__ == 113 ? 1 : -1];

Cached compiler stdout:
 
Cached compiler stderr:
 
Checking if "long double mantissa is 113 bits" compiles: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
char size_test[sizeof(float) == sizeof(double) ? 1 : -1];

Cached compiler stdout:
 
Cached compiler stderr:
 /home/guiss/projects/usp/labdig/fpga_soc_pong/software/libc/meson-private/tmp5gd8ufz0/testfile.c:2:6: error: size of array 'size_test' is negative
    2 | char size_test[sizeof(float) == sizeof(double) ? 1 : -1];
      |      ^~~~~~~~~

Checking if "double same as float" compiles: NO (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fno-common: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -frounding-math: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fsignaling-nans: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 riscv64-unknown-elf-gcc: error: unrecognized command-line option '-Wunsupported-floating-point-opt'

Compiler for C supports arguments -Wno-unsupported-floating-point-opt: NO (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fno-stack-protector: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fno-builtin-copysignl: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #ifndef __USER_LABEL_PREFIX__
        #define MESON_UNDERSCORE_PREFIX unsupported
        #else
        #define MESON_UNDERSCORE_PREFIX __USER_LABEL_PREFIX__
        #endif
        "MESON_HAVE_UNDERSCORE_DELIMITER" MESON_UNDERSCORE_PREFIX
        
Cached compiler stdout:
 #define __STDC__ 1
#define __STDC_VERSION__ 201710L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 12
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 0
#define __VERSION__ "12.2.0"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 16
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __GNUC_EXECUTION_CHARSET_NAME "UTF-8"
#define __GNUC_WIDE_EXECUTION_CHARSET_NAME "UTF-32LE"
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ long unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ long int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ long unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ long int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ long unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __EXCEPTIONS 1
#define __GXX_ABI_VERSION 1017
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0x7fffffff
#define __WCHAR_MIN__ (-__WCHAR_MAX__ - 1)
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffff
#define __SIZE_MAX__ 0xffffffffU
#define __SCHAR_WIDTH__ 8
#define __SHRT_WIDTH__ 16
#define __INT_WIDTH__ 32
#define __LONG_WIDTH__ 32
#define __LONG_LONG_WIDTH__ 64
#define __WCHAR_WIDTH__ 32
#define __WINT_WIDTH__ 32
#define __PTRDIFF_WIDTH__ 32
#define __SIZE_WIDTH__ 32
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __INTMAX_WIDTH__ 64
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __SIG_ATOMIC_WIDTH__ 32
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffffL
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffUL
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST8_WIDTH__ 8
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_MAX__ 0x7fffffffL
#define __INT32_C(c) c ## L
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __INT_LEAST64_WIDTH__ 64
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffUL
#define __UINT32_C(c) c ## UL
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7fffffff
#define __INT_FAST8_WIDTH__ 32
#define __INT_FAST16_MAX__ 0x7fffffff
#define __INT_FAST16_WIDTH__ 32
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __INT_FAST64_WIDTH__ 64
#define __UINT_FAST8_MAX__ 0xffffffffU
#define __UINT_FAST16_MAX__ 0xffffffffU
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fffffff
#define __INTPTR_WIDTH__ 32
#define __UINTPTR_MAX__ 0xffffffffU
#define __GCC_IEC_559 0
#define __GCC_IEC_559_COMPLEX 0
#define __FLT_EVAL_METHOD__ 0
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859811704183484516925e+38F
#define __FLT_NORM_MAX__ 3.40282346638528859811704183484516925e+38F
#define __FLT_MIN__ 1.17549435082228750796873653722224568e-38F
#define __FLT_EPSILON__ 1.19209289550781250000000000000000000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FLT_IS_IEC_60559__ 2
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.79769313486231570814527423731704357e+308L)
#define __DBL_NORM_MAX__ ((double)1.79769313486231570814527423731704357e+308L)
#define __DBL_MIN__ ((double)2.22507385850720138309023271733240406e-308L)
#define __DBL_EPSILON__ ((double)2.22044604925031308084726333618164062e-16L)
#define __DBL_DENORM_MIN__ ((double)4.94065645841246544176568792868221372e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __DBL_IS_IEC_60559__ 2
#define __LDBL_MANT_DIG__ 113
#define __LDBL_DIG__ 33
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 36
#define __LDBL_DECIMAL_DIG__ 36
#define __LDBL_MAX__ 1.18973149535723176508575932662800702e+4932L
#define __LDBL_NORM_MAX__ 1.18973149535723176508575932662800702e+4932L
#define __LDBL_MIN__ 3.36210314311209350626267781732175260e-4932L
#define __LDBL_EPSILON__ 1.92592994438723585305597794258492732e-34L
#define __LDBL_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __LDBL_IS_IEC_60559__ 2
#define __FLT32_MANT_DIG__ 24
#define __FLT32_DIG__ 6
#define __FLT32_MIN_EXP__ (-125)
#define __FLT32_MIN_10_EXP__ (-37)
#define __FLT32_MAX_EXP__ 128
#define __FLT32_MAX_10_EXP__ 38
#define __FLT32_DECIMAL_DIG__ 9
#define __FLT32_MAX__ 3.40282346638528859811704183484516925e+38F32
#define __FLT32_NORM_MAX__ 3.40282346638528859811704183484516925e+38F32
#define __FLT32_MIN__ 1.17549435082228750796873653722224568e-38F32
#define __FLT32_EPSILON__ 1.19209289550781250000000000000000000e-7F32
#define __FLT32_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F32
#define __FLT32_HAS_DENORM__ 1
#define __FLT32_HAS_INFINITY__ 1
#define __FLT32_HAS_QUIET_NAN__ 1
#define __FLT32_IS_IEC_60559__ 2
#define __FLT64_MANT_DIG__ 53
#define __FLT64_DIG__ 15
#define __FLT64_MIN_EXP__ (-1021)
#define __FLT64_MIN_10_EXP__ (-307)
#define __FLT64_MAX_EXP__ 1024
#define __FLT64_MAX_10_EXP__ 308
#define __FLT64_DECIMAL_DIG__ 17
#define __FLT64_MAX__ 1.79769313486231570814527423731704357e+308F64
#define __FLT64_NORM_MAX__ 1.79769313486231570814527423731704357e+308F64
#define __FLT64_MIN__ 2.22507385850720138309023271733240406e-308F64
#define __FLT64_EPSILON__ 2.22044604925031308084726333618164062e-16F64
#define __FLT64_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F64
#define __FLT64_HAS_DENORM__ 1
#define __FLT64_HAS_INFINITY__ 1
#define __FLT64_HAS_QUIET_NAN__ 1
#define __FLT64_IS_IEC_60559__ 2
#define __FLT128_MANT_DIG__ 113
#define __FLT128_DIG__ 33
#define __FLT128_MIN_EXP__ (-16381)
#define __FLT128_MIN_10_EXP__ (-4931)
#define __FLT128_MAX_EXP__ 16384
#define __FLT128_MAX_10_EXP__ 4932
#define __FLT128_DECIMAL_DIG__ 36
#define __FLT128_MAX__ 1.18973149535723176508575932662800702e+4932F128
#define __FLT128_NORM_MAX__ 1.18973149535723176508575932662800702e+4932F128
#define __FLT128_MIN__ 3.36210314311209350626267781732175260e-4932F128
#define __FLT128_EPSILON__ 1.92592994438723585305597794258492732e-34F128
#define __FLT128_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F128
#define __FLT128_HAS_DENORM__ 1
#define __FLT128_HAS_INFINITY__ 1
#define __FLT128_HAS_QUIET_NAN__ 1
#define __FLT128_IS_IEC_60559__ 2
#define __FLT32X_MANT_DIG__ 53
#define __FLT32X_DIG__ 15
#define __FLT32X_MIN_EXP__ (-1021)
#define __FLT32X_MIN_10_EXP__ (-307)
#define __FLT32X_MAX_EXP__ 1024
#define __FLT32X_MAX_10_EXP__ 308
#define __FLT32X_DECIMAL_DIG__ 17
#define __FLT32X_MAX__ 1.79769313486231570814527423731704357e+308F32x
#define __FLT32X_NORM_MAX__ 1.79769313486231570814527423731704357e+308F32x
#define __FLT32X_MIN__ 2.22507385850720138309023271733240406e-308F32x
#define __FLT32X_EPSILON__ 2.22044604925031308084726333618164062e-16F32x
#define __FLT32X_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F32x
#define __FLT32X_HAS_DENORM__ 1
#define __FLT32X_HAS_INFINITY__ 1
#define __FLT32X_HAS_QUIET_NAN__ 1
#define __FLT32X_IS_IEC_60559__ 2
#define __FLT64X_MANT_DIG__ 113
#define __FLT64X_DIG__ 33
#define __FLT64X_MIN_EXP__ (-16381)
#define __FLT64X_MIN_10_EXP__ (-4931)
#define __FLT64X_MAX_EXP__ 16384
#define __FLT64X_MAX_10_EXP__ 4932
#define __FLT64X_DECIMAL_DIG__ 36
#define __FLT64X_MAX__ 1.18973149535723176508575932662800702e+4932F64x
#define __FLT64X_NORM_MAX__ 1.18973149535723176508575932662800702e+4932F64x
#define __FLT64X_MIN__ 3.36210314311209350626267781732175260e-4932F64x
#define __FLT64X_EPSILON__ 1.92592994438723585305597794258492732e-34F64x
#define __FLT64X_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F64x
#define __FLT64X_HAS_DENORM__ 1
#define __FLT64X_HAS_INFINITY__ 1
#define __FLT64X_HAS_QUIET_NAN__ 1
#define __FLT64X_IS_IEC_60559__ 2
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __NO_INLINE__ 1
#define __CHAR_UNSIGNED__ 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 1
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 1
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 1
#define __GCC_ATOMIC_SHORT_LOCK_FREE 1
#define __GCC_ATOMIC_INT_LOCK_FREE 1
#define __GCC_ATOMIC_LONG_LOCK_FREE 1
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 1
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 4
#define __riscv 1
#define __riscv_mul 1
#define __riscv_div 1
#define __riscv_muldiv 1
#define __riscv_xlen 32
#define __riscv_float_abi_soft 1
#define __riscv_cmodel_medlow 1
#define __riscv_arch_test 1
#define __riscv_i 2000000
#define __riscv_m 2000000
#define __ELF__ 1
#define __vexriscv__ 1
#define _FILE_OFFSET_BITS 64
#define MESON_UNDERSCORE_PREFIX __USER_LABEL_PREFIX__
        "MESON_HAVE_UNDERSCORE_DELIMITER"

Cached compiler stderr:
 
Queried compiler for function prefix: __USER_LABEL_PREFIX__ is ""
Program riscv64-unknown-elf-gcc-nm found: YES
Program scripts/duplicate-names found: YES (/home/guiss/projects/usp/labdig/fpga_soc_pong/env/lib/python3.10/site-packages/pythondata_software_picolibc/data/scripts/duplicate-names)
Using cached compile:
Cached command line:   

Code:
 int main(void) { return 0; }

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports link arguments -Wl,--defsym=_start=0: YES (cached)
Using cached compile:
Cached command line:   

Code:
 int main(void) { return 0; }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: unrecognized -a option `lias'
collect2: error: ld returned 1 exit status

Compiler for C supports link arguments -Wl,-alias,main,testalias: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        int foo(void) { return 0; }
        int bar(void) __attribute__((alias("foo")));
Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports function attribute alias: YES (cached)
Using cached compile:
Cached command line:   

Code:
 int foo(const char * p, ...) __attribute__((format(printf, 1, 2)));
Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports function attribute format: YES (cached)
Using cached compile:
Cached command line:   

Code:
 int foo(void) __attribute__((weak));
Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports function attribute weak: YES (cached)
Running command: /usr/bin/riscv64-unknown-elf-gcc -print-search-dirs
--- stdout ---
install: /usr/lib/gcc/riscv64-unknown-elf/12.2.0/
programs: =/usr/lib/gcc/riscv64-unknown-elf/12.2.0/:/usr/lib/gcc/riscv64-unknown-elf/12.2.0/:/usr/lib/gcc/riscv64-unknown-elf/:/usr/lib/gcc/riscv64-unknown-elf/12.2.0/:/usr/lib/gcc/riscv64-unknown-elf/:/usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/riscv64-unknown-elf/12.2.0/:/usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/
libraries: =/usr/lib/gcc/riscv64-unknown-elf/12.2.0/:/usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/lib/riscv64-unknown-elf/12.2.0/:/usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/lib/:/usr/riscv64-unknown-elf/lib/riscv64-unknown-elf/12.2.0/:/usr/riscv64-unknown-elf/lib/:/usr/riscv64-unknown-elf/usr/lib/riscv64-unknown-elf/12.2.0/:/usr/riscv64-unknown-elf/usr/lib/

--- stderr ---


Running command: /usr/bin/expr install: /usr/lib/gcc/riscv64-unknown-elf/12.2.0/ : install: *\(.*\)
--- stdout ---
/usr/lib/gcc/riscv64-unknown-elf/12.2.0/

--- stderr ---


Configuring picolibc.specs using configuration
Configuring picolibcpp.specs using configuration
Configuring test.specs using configuration
Configuring picolibc.ld using configuration
Configuring picolibcpp.ld using configuration
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Werror=implicit-function-declaration: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Werror=vla: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Warray-bounds: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Wold-style-definition: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Werror=double-promotion: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Wno-missing-braces: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Wno-implicit-int: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Wno-return-type: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 riscv64-unknown-elf-gcc: error: unrecognized command-line option '-Wunused-command-line-argument'; did you mean '-Wunused-dummy-argument'?

Compiler for C supports arguments -Wno-unused-command-line-argument: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
struct test { int part: 24; } __attribute__((packed));
unsigned int foobar (const struct test *p) { return p->part; }

Cached compiler stdout:
 
Cached compiler stderr:
 
Checking if "packed structs may contain bitfields" compiles: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#include <stddef.h>
int overflows (size_t a, size_t b) { size_t x; return __builtin_mul_overflow(a, b, &x); }
volatile size_t aa = 42;
int main (void) { return overflows(aa, aa); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010094

Checking if "has __builtin_mul_overflow" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#include <stddef.h>
int overflows (size_t a, size_t b) { size_t x; return __builtin_add_overflow(a, b, &x); }
volatile size_t aa = 42;
int main (void) { return overflows(aa, aa); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010094

Checking if "has __builtin_add_overflow" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
float _Complex test(float _Complex z) { return z; }

Cached compiler stdout:
 
Cached compiler stderr:
 
Checking if "supports _Complex" compiles: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
volatile int a = 42;
int main (void) {
  return __builtin_expect(a, 1);
}

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010094

Checking if "has __builtin_expect" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Werror: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
void *foobar(int) __attribute__((__alloc_size__(1)));
void *foobar2(int, int) __attribute__((__alloc_size__(1, 2)));

Cached compiler stdout:
 
Cached compiler stderr:
 
Checking if "attribute __alloc_size__" compiles: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
void __attribute__((constructor(101))) ctor (void) {}
void __attribute__((destructor(101))) dtor (void) {}

Cached compiler stdout:
 
Cached compiler stderr:
 
Checking if "attributes constructor/destructor" compiles: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(void * i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_alloca(1)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_alloca" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(int i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_ffs(42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_ffs" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(long i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_ffsl((long)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_ffsl" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(long long i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_ffsll((long long)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_ffsll" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(int i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_ctz((unsigned int)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_ctz" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(int i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_ctzl((unsigned long)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_ctzl" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(int i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_ctzll((unsigned long long)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_ctzll" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(long double i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_copysignl((long double)42, (long double) 42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_copysignl" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(double i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_copysign(42, 42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_copysign" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(int i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_isinfl((long double)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_isinfl" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(int i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_isinf((long double)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_isinf" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(int i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_isnanl((long double)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_isnanl" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(int i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_isnan((long double)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_isnan" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(int i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_finitel((long double)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_finitel" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
static int foo(int i __attribute__((unused))) { return 0; }
int main(void) { return foo(__builtin_isfinite((long double)42)); }

Cached compiler stdout:
 
Cached compiler stderr:
 /usr/lib/gcc/riscv64-unknown-elf/12.2.0/../../../../riscv64-unknown-elf/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000010074

Checking if "test for __builtin_isfinite" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fno-tree-loop-distribute-patterns: YES (cached)
Using cached compile:
Cached command line:   

Code:
 int __attribute__((no_builtin)) foo(int x) { return x + 1; }
Cached compiler stdout:
 
Cached compiler stderr:
 /home/guiss/projects/usp/labdig/fpga_soc_pong/software/libc/meson-private/tmpk_iqej2g/testfile.c:1:1: error: 'no_builtin' attribute directive ignored [-Werror=attributes]
    1 | int __attribute__((no_builtin)) foo(int x) { return x + 1; }
      | ^~~
cc1: all warnings being treated as errors

Checking if "no_builtin attribute" compiles: NO (cached)
Using cached compile:
Cached command line:   

Code:
 inline __attribute__((always_inline)) int foo(void) { return 0; }
Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports function attribute always_inline: YES (cached)
Using cached compile:
Cached command line:   

Code:
 inline __attribute__((gnu_inline)) int foo(void) { return 0; }
Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports function attribute gnu_inline: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fno-builtin: YES (cached)
Running command: /usr/bin/sed -e /^#/d -e /^$/d -e s/ .*$// /home/guiss/projects/usp/labdig/fpga_soc_pong/env/lib/python3.10/site-packages/pythondata_software_picolibc/data/newlib/libc/iconv/encoding.aliases
--- stdout ---
big5
cp775
cp850
cp852
cp855
cp866
euc_jp
euc_kr
euc_tw
iso_8859_1
iso_8859_10
iso_8859_11
iso_8859_13
iso_8859_14
iso_8859_15
iso_8859_2
iso_8859_3
iso_8859_4
iso_8859_5
iso_8859_6
iso_8859_7
iso_8859_8
iso_8859_9
iso_ir_111
koi8_r
koi8_ru
koi8_u
koi8_uni
ucs_2
ucs_2_internal
ucs_2be
ucs_2le
ucs_4
ucs_4_internal
ucs_4be
ucs_4le
us_ascii
utf_16
utf_16be
utf_16le
utf_8
win_1250
win_1251
win_1252
win_1253
win_1254
win_1255
win_1256
win_1257
win_1258

--- stderr ---


Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -ffunction-sections: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fstack-protector-all: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fstack-protector-strong: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fno-builtin-malloc: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fno-builtin-free: YES (cached)
Message: libc/string/memcpy.c: machine overrides generic
Message: libc/string/memmove.S: machine overrides generic
Message: libc/string/memset.S: machine overrides generic
Message: libc/string/strcpy.c: machine overrides generic
Message: libc/string/strlen.c: machine overrides generic
Message: libc/string/strcmp.S: machine overrides generic
Message: libc/include/sys/fenv.h: machine overrides generic
Message: libc/include/machine/math.h: machine overrides generic
Message: libm/math/s_fabs.c: machine overrides generic
Message: libm/math/s_sqrt.c: machine overrides generic
Message: libm/math/sf_fabs.c: machine overrides generic
Message: libm/math/sf_sqrt.c: machine overrides generic
Message: libm/common/s_finite.c: machine overrides generic
Message: libm/common/s_copysign.c: machine overrides generic
Message: libm/common/s_isinf.c: machine overrides generic
Message: libm/common/s_isnan.c: machine overrides generic
Message: libm/common/s_fma.c: machine overrides generic
Message: libm/common/s_fmax.c: machine overrides generic
Message: libm/common/s_fmin.c: machine overrides generic
Message: libm/common/s_fpclassify.c: machine overrides generic
Message: libm/common/s_lrint.c: machine overrides generic
Message: libm/common/s_llrint.c: machine overrides generic
Message: libm/common/s_lround.c: machine overrides generic
Message: libm/common/s_llround.c: machine overrides generic
Message: libm/common/sf_finite.c: machine overrides generic
Message: libm/common/sf_copysign.c: machine overrides generic
Message: libm/common/sf_isinf.c: machine overrides generic
Message: libm/common/sf_isnan.c: machine overrides generic
Message: libm/common/sf_fma.c: machine overrides generic
Message: libm/common/sf_fmax.c: machine overrides generic
Message: libm/common/sf_fmin.c: machine overrides generic
Message: libm/common/sf_fpclassify.c: machine overrides generic
Message: libm/common/sf_lrint.c: machine overrides generic
Message: libm/common/sf_llrint.c: machine overrides generic
Message: libm/common/sf_lround.c: machine overrides generic
Message: libm/common/sf_llround.c: machine overrides generic
Message: libm/fenv/feclearexcept.c: machine overrides generic
Message: libm/fenv/fegetenv.c: machine overrides generic
Message: libm/fenv/fegetexceptflag.c: machine overrides generic
Message: libm/fenv/fegetround.c: machine overrides generic
Message: libm/fenv/feholdexcept.c: machine overrides generic
Message: libm/fenv/feraiseexcept.c: machine overrides generic
Message: libm/fenv/fesetenv.c: machine overrides generic
Message: libm/fenv/fesetexceptflag.c: machine overrides generic
Message: libm/fenv/fesetround.c: machine overrides generic
Message: libm/fenv/fetestexcept.c: machine overrides generic
Message: libm/fenv/feupdateenv.c: machine overrides generic
Configuring picolibc.h using configuration
Build targets in project: 9
NOTICE: Future-deprecated features used:
 * 0.56.0: {'meson.source_root'}
 * 0.58.0: {'meson.get_cross_property'}

picolibc 1.7.9

  User defined options
    Cross files         : /home/guiss/projects/usp/labdig/fpga_soc_pong/software/libc/cross.txt
    backend             : ninja
    includedir          : picolibc/riscv64-unknown-elf/include
    libdir              : picolibc/riscv64-unknown-elf/lib
    atomic-ungetc       : false
    format-default      : integer
    io-long-long        : true
    multilib            : false
    picocrt             : false
    thread-local-storage: false

Found ninja-1.10.2.git.kitware.jobserver-1 at /usr/bin/ninja
Failed to guess install tag for /usr/lib/gcc/riscv64-unknown-elf/12.2.0/picolibc.specs
Failed to guess install tag for /usr/lib/gcc/riscv64-unknown-elf/12.2.0/picolibcpp.specs
Failed to guess install tag for /usr/local/picolibc/riscv64-unknown-elf/lib/picolibc.ld
Failed to guess install tag for /usr/local/picolibc/riscv64-unknown-elf/lib/picolibcpp.ld
Command line for building ['newlib/libc.a'] is long, using a response file
